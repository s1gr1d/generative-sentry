---
description: Patterns and best practices for generative art algorithms
globs: ["**/algorithms/**", "**/*algorithm*", "**/*generator*", "**/utils/**"]
alwaysApply: false
---

# Generative Art Algorithm Patterns

## Algorithm Structure
Separate algorithm logic from rendering for reusability:

```tsx
// algorithms/perlinNoise.ts
export interface NoiseParams {
  seed: number
  octaves: number
  frequency: number
  amplitude: number
}

export class PerlinNoiseGenerator {
  constructor(private params: NoiseParams) {}
  
  generate(x: number, y: number): number {
    // Pure algorithm logic
    return noiseValue
  }
  
  updateParams(newParams: Partial<NoiseParams>): void {
    this.params = { ...this.params, ...newParams }
  }
}
```

## Reproducible Randomness
Always use seeded random for consistent results:

```tsx
// utils/seededRandom.ts
export class SeededRandom {
  constructor(private seed: number) {}
  
  next(): number {
    this.seed = (this.seed * 9301 + 49297) % 233280
    return this.seed / 233280
  }
  
  range(min: number, max: number): number {
    return min + this.next() * (max - min)
  }
}

// Usage in algorithms
const rng = new SeededRandom(userSeed)
const randomValue = rng.range(0, 1)
```

## Parameter Management
```tsx
export interface ArtworkParams {
  seed: number
  complexity: number
  colorPalette: string[]
  animationSpeed: number
}

export const defaultParams: ArtworkParams = {
  seed: 12345,
  complexity: 5,
  colorPalette: ['#ff6b6b', '#4ecdc4', '#45b7d1'],
  animationSpeed: 1.0
}
```

## Mathematical Utilities
Create reusable math functions:

```tsx
// utils/mathUtils.ts
export const lerp = (a: number, b: number, t: number): number => 
  a + (b - a) * t

export const map = (value: number, start1: number, stop1: number, start2: number, stop2: number): number =>
  start2 + (stop2 - start2) * ((value - start1) / (stop1 - start1))

export const noise2D = (x: number, y: number, seed: number): number => {
  // Implement noise function
}

export const smoothstep = (edge0: number, edge1: number, x: number): number => {
  const t = Math.max(0, Math.min(1, (x - edge0) / (edge1 - edge0)))
  return t * t * (3 - 2 * t)
}
```

## Color Usage (RESTRICTED)
**CRITICAL**: Only use approved colors from the official palette:

```tsx
import { 
  COLOR_PALETTE, 
  getRandomColor, 
  getRandomColors,
  hexToThreeColor 
} from '@/utils/colorPalette'

// Algorithm color selection
export const selectAlgorithmColors = (count: number) => {
  return getRandomColors(count, 'PRIMARY')
}

export const getThemeColors = (theme: 'warm' | 'cool' | 'purples') => {
  switch (theme) {
    case 'warm': return getRandomColors(3, 'WARM')
    case 'cool': return getRandomColors(3, 'COOL')  
    case 'purples': return getRandomColors(3, 'PURPLES')
    default: return getRandomColors(3, 'ALL')
  }
}
```

## Export and Save Functionality
```tsx
export const downloadCanvas = (canvas: HTMLCanvasElement, filename: string = 'artwork.png'): void => {
  const link = document.createElement('a')
  link.download = filename
  link.href = canvas.toDataURL()
  link.click()
}

export const generateMetadata = (params: ArtworkParams) => ({
  seed: params.seed,
  timestamp: new Date().toISOString(),
  parameters: params,
  algorithm: 'PerlinNoise',
  version: '1.0'
})
```